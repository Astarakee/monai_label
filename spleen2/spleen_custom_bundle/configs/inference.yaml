imports:
- "$import glob"
- "$import os"
- $import scripts
- $import scripts.data_list


bundle_root: "."
save_pred_dir: "$@bundle_root + '/eval'"
dataset_dir: "/mnt/workspace/projects/16_MonaiLabel/datasets/Task09_Spleen/imagesTs"
datalist: '$scripts.data_list.get_data_list(@dataset_dir)'
device: "$torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')"
input_channels: 1
output_classes: 2
network_def:
  _target_: monai.networks.nets.UNet
  spatial_dims: 3
  in_channels: "@input_channels"
  out_channels: "@output_classes"
  channels:
  - 16
  - 32
  - 64
  - 128
  - 256
  strides:
  - 2
  - 2
  - 2
  - 2
  num_res_units: 2
  norm:
    _target_: monai.networks.layers.Norm.BATCH
network: "$@network_def.to(@device)"
preprocessing:
  _target_: Compose
  transforms:
  - _target_: LoadImaged
    keys: image
  - _target_: EnsureChannelFirstd
    keys: image
  - _target_: Orientationd
    keys: image
    axcodes: RAS
  - _target_: Spacingd
    keys: image
    pixdim:
    - 1.5
    - 1.5
    - 2.0
  - _target_: ScaleIntensityRanged
    keys: image
    a_min: -57.0
    a_max: 164.0
    b_min: 0.0
    b_max: 1.0
    clip: True
  - _target_: CropForegroundd
    keys: image
    source_key: image
dataset:
  _target_: Dataset
  data: "@datalist"
  transform: "@preprocessing"

dataloader:
  _target_: DataLoader
  dataset: "@dataset"
  batch_size: 1
  shuffle: false
  num_workers: 4

postprocessing:
  _target_: Compose
  transforms:
  - _target_: Invertd
    keys: pred
    transform: "@preprocessing"
    orig_keys: image
    meta_keys: pred_meta_dict
    orig_meta_keys: image_meta_dict
    meta_key_postfix: meta_dict
    nearest_interp: False
    to_tensor: True
  - _target_: AsDiscreted
    keys: pred
    argmax: True
    to_onehot: 2
  - _target_: SaveImaged
    keys: pred
    meta_keys: pred_meta_dict
    output_dir: "@save_pred_dir"
    output_postfix: seg
    resample: False
    separate_folder: False

inferer:
  _target_: SlidingWindowInferer
  roi_size:
  - 160
  - 160
  - 160
  sw_batch_size: 4
  overlap: 0.5

handlers:
- _target_: CheckpointLoader
  load_path: "$@bundle_root + '/models/model.pt'"
  load_dict:
    model: "@network"
- _target_: StatsHandler
  iteration_log: false

evaluator:
  _target_: SupervisedEvaluator
  device: "@device"
  val_data_loader: "@dataloader"
  network: "@network"
  inferer: "@inferer"
  postprocessing: "@postprocessing"
  val_handlers: "@handlers"
  amp: true

initialize:
- "$setattr(torch.backends.cudnn, 'benchmark', True)"
run:
- "$@evaluator.run()"